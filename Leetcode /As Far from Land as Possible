class Solution {
    class Pair{
        int x=0;
        int y=0;
        int dist=0;
        Pair(int x, int y, int dist){
            this.x=x;
            this.y=y;
            this.dist=dist;
        }
    }
    public int maxDistance(int[][] grid) {
     int vis[][]=new int[grid.length][grid[0].length];
     Queue<Pair> q=new LinkedList<>();
      int dist[][]=new int [grid.length][grid[0].length];
     for(int i=0;i<grid.length;i++){
         for(int j=0;j<grid[0].length;j++){
             if(grid[i][j]==1){
                 vis[i][j]=1;
                 q.add(new Pair(i,j,0));
             }
         }
     }   
    
        while(q.size()>0){
            Pair p=q.remove();
            int i=p.x;
            int j=p.y;
            int d=p.dist;
          dist[i][j]=d;
          if(i+1<grid.length && vis[i+1][j]==0){
              vis[i+1][j]=1;
              q.add(new Pair(i+1,j,d+1));
          }
           if(j+1<grid[0].length && vis[i][j+1]==0){
               vis[i][j+1]=1;
              q.add(new Pair(i,j+1,d+1));
          }
          if(j-1>=0 && vis[i][j-1]==0){
              vis[i][j-1]=1;
              q.add(new Pair(i,j-1,d+1));
          }
           if(i-1>=0 && vis[i-1][j]==0){
               vis[i-1][j]=1;
              q.add(new Pair(i-1,j,d+1));
          }
        }
        int m=-1;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                m=Math.max(m,dist[i][j]);
            }
        }
        if(m==0){
            return -1;
        }
        return m;

    }
}
