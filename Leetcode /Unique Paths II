class Solution {
    public int uniquePathsWithObstacles(int[][] mat) {
        int m=mat.length;
        int n=mat[0].length;
        int cnt=0;
        if(mat[0][0]==1){
            return 0;
        }
        int dp[][]=new int[m][n];
        int k=helper(mat,0,0,m,n,dp);
        return k;
    }
     public int helper(int mat[][],int r,int c,int m,int n,int dp[][]){
        if(c>=n||r>=m){
            return 0;
        }
        if(dp[r][c]!=0){
            return dp[r][c];
        }
        if(r==m-1&&c==n-1){
            if(mat[r][c]==1){
                return 0;
            }
            return 1;
        }
        int cnt1=0;
        int cnt2=0;
        if(r+1<mat.length && mat[r+1][c]!=1){
             cnt1=helper(mat,r+1,c,m,n,dp);
        }
        if(c+1<mat[0].length && mat[r][c+1]!=1){
             cnt2=helper(mat,r,c+1,m,n,dp);
        }
        
        return dp[r][c]=cnt1+cnt2;
    }

}
