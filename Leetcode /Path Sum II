/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {

      if(root==null){
          List<List<Integer>> ans=new ArrayList<>();
            return ans;
        }
                // if(root.left==null && root.right==null){
                //     if(root.val==targetSum){
                //         return true;
                //     }else{
                //         return false;
                //     }
                // }
        List<List<Integer>> ans=new ArrayList<>();
        List<Integer> list=new ArrayList<>();
        list.add(root.val);
        fun(root,targetSum,list,ans);
       return ans;

    }

 public void fun(TreeNode root,int targetSum, List<Integer> list,List<List<Integer>> ans){
       
        if(root.left==null && root.right==null){
            int sum=0;
            for(int i=0; i<list.size();i++){
                sum+=list.get(i);
            } 
         //   System.out.println(list);
           if(sum==targetSum){ 
           List<Integer>   list1=new ArrayList<>();
               for(int i=0; i<list.size();i++){
                list1.add(list.get(i));
            } 
                ans.add(list1); 
               
            return ;
           }
          
        }
      if(root.left!=null){
          list.add(root.left.val);
          fun(root.left,targetSum,list,ans);
         
          list.remove(list.size()-1);
      }
        if(root.right!=null){
          list.add(root.right.val);
          fun(root.right,targetSum,list,ans);
          
          list.remove(list.size()-1);
      }
    }
}
