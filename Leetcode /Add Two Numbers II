/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
     ListNode h1=reverseList(l1);
     ListNode h2=reverseList(l2);
   int carry=0;
   ListNode h=new ListNode(-1);
   ListNode h4=h;
  while(h1!=null || h2!=null){
      int v1=0;
      if(h1!=null){
          v1=h1.val;
          h1=h1.next;
      }
      int v2=0;
      if(h2!=null){
          v2=h2.val;
           h2=h2.next;
      }
      int sum=v1+v2+carry;
      ListNode node=new ListNode(sum%10);
      h.next=node;
      h=h.next;
      carry=sum/10;
  }
  if(carry!=0){
    ListNode node=new ListNode(carry);  
    h.next=node;
  }
  return reverseList(h4.next);
    }
public ListNode reverseList(ListNode head) {
               if(head == null || head.next == null) return head;
        
        ListNode curr = head;
        ListNode prev = null;
        
        while(curr != null){
            ListNode nbr = curr.next;
            curr.next = prev;
            
            prev = curr;
            curr = nbr;
        }
        
        return prev;
    }
}
