class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        int vis[][] =new int[matrix.length][matrix[0].length];
         int ans[][] =new int[matrix.length][matrix[0].length];
        //   for(int i=0;i<matrix.length;i++){
        //     for(int j=0;j<matrix[0].length;j++){
        //        ans[i][j]=1;  
        //     }
        // }
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(vis[i][j]==0){
                dfs(i,j,matrix,vis,ans);
                }  
            }
        }
        int tans=1;
         for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                System.out.print(ans[i][j]+" ");
               tans=Math.max(tans,ans[i][j]); 
            }
            System.out.println();
        }
        return tans;
    }
    public int dfs(int i,int j,int[][] matrix,int[][] vis,int[][] ans){
        if(vis[i][j]==1){
            return ans[i][j];
        }
         vis[i][j]=1;
         int a=1;
         int b=1;
         int c=1;
         int d=1;
         if(i-1>=0  && matrix[i-1][j]>matrix[i][j]){
           a+=dfs(i-1,j,matrix,vis,ans);
         }
          if(i+1<matrix.length && matrix[i+1][j]>matrix[i][j]){
           b+=dfs(i+1,j,matrix,vis,ans);
         }
          if(j-1>=0 && matrix[i][j-1]>matrix[i][j]){
          c+=dfs(i,j-1,matrix,vis,ans);
         }
         if(j+1<matrix[0].length  && matrix[i][j+1]>matrix[i][j]){
          d+=dfs(i,j+1,matrix,vis,ans);
         }
         int e=Math.max(a,Math.max(b,c));
        ans[i][j]+=Math.max(e,d);
        return ans[i][j];

    }
}
