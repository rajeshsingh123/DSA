class Solution {
   public  static int ans;
    public int findMaxFish(int[][] grid) {
         
          int count=0;
        for(int r=0; r< grid.length; r++){
            for(int c=0; c< grid[0].length; c++){
                ans=0;
                if(grid[r][c]>0){  
                    dfs(grid,r,c);
                   // System.out.println(ans);
                    count=Math.max(count,ans);  
                    }
            }
        }
        return count;
    }


  public void dfs(int [][] grid, int r, int c){
        //grid[r][c]=0;
        ans+=grid[r][c];
        // System.out.println(ans);
        grid[r][c]=0;
       
        if(r-1>=0 && grid[r-1][c]>0){       
            dfs(grid,r-1,c);
            
        }
         if(c+1<grid[0].length && grid[r][c+1]>0){
            dfs(grid,r,c+1);
            
        }
         if(r+1<grid.length && grid[r+1][c]>0){
            dfs(grid,r+1,c);
             
        }
     if(c-1>=0 && grid[r][c-1]>0){
            dfs(grid,r,c-1);
            
        }
    }



}
