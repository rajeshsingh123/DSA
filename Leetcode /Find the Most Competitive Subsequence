class Solution {
    public int[] mostCompetitive(int[] nums, int k) {
        
    Stack<Integer> s=new Stack<>();
        int n=nums.length;
        for(int i=0;i<n;i++)
        {
            while(!s.isEmpty()  && nums[i] < s.peek() && (n-i)>(k-s.size()))
                s.pop();
            if(s.size()<k)
            s.push(nums[i]);
        }
        int a[]=new int[k];
        for(int i=k-1;i>=0;i--)
            a[i]=s.pop();
         return a;
    }
}



//--------------TLE -------------
// class Solution {
//     public int[] mostCompetitive(int[] nums, int k) {
//         // PriorityQueue<Integer> pq=new PriorityQueue<>();
//         // for(int i=0;i<nums.length;i++){
//         //     pq.add(nums[i]);
//         // }
//         int ans[]=new int[k];
//         int idx=0;
//         for(int i=0;i<nums.length;i++){
//             int min=nums[i];
//             for(int j=i+1;j<=nums.length-(k-idx);j++){
//                 if(nums[j]<min){
//                     min=nums[j];
//                     i=j;
//                 }
//             }
//             ans[idx]=min;
//             idx++;
//             if(idx==k){
//               break;   
//             }
//         }
//         return ans;
//     }
// }
