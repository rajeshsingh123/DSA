class Solution {
    public int jump(int[] nums) {
        int dp[]=new int[nums.length];
        for(int i=1;i<nums.length;i++){
            dp[i]=Integer.MAX_VALUE;
        }
        for(int i=0;i<nums.length;i++){
            int jump=nums[i];
            for(int j=1;j<=jump;j++){
                int max=i+j;
                if(max<nums.length){
                    dp[max]=Math.min(dp[i]+1,dp[max]);
                }


            }
        }
      return dp[nums.length-1];
    }
}



/////---REC AND MEMOIZATION---TLE COMING
// class Solution {
//     public int jump(int[] nums) {
//         if(nums.length==1){
//             return 0;
//         }
//         int dp[]=new int[nums.length];
//      return  fun(nums,0,dp);
//     }
//    public int fun(int []nums,int idx,int dp[]){
//       if(idx>=nums.length){
//           return 0;
//       }
//     if(dp[idx]!=0){
//         return dp[idx];
//     }
//      int maxj=nums[idx];
//      int ans=Integer.MAX_VALUE;
//      for(int i=1;i<=maxj;i++){
//          int d=idx+i;
//          if(d==nums.length-1){
//              return 1;
//          }
//          ans=Math.min(ans,fun(nums,d,dp));
//      }
//      if(ans==Integer.MAX_VALUE){
//          return ans;
//      }
//      return dp[idx]=ans+1;

//     }
// }
