class Solution {
private final int[][] directions = new int[][]{{1, 2}, {2, 1}, {2, -1}, {1, -2}, {-1, -2}, {-2, -1}, {-2, 1}, {-1, 2}};
    public double knightProbability(int n, int k, int row, int col) {
        double curr[][]=new double[n][n];
        double next[][]=new double[n][n];
        curr[row][col]=1;
       for(int m=0;m<k;m++){
           for(int i=0;i<n;i++){
               for(int j=0;j<n;j++){
                   if(curr[i][j]!=0){
                       for(int l=0;l<8;l++){
                           int ni=i+directions[l][0];
                           int nj=j+directions[l][1];
                           if(isvalid(ni,nj,curr)){
                               next[ni][nj]+=curr[i][j]/8.0;
                           }
                       }
                   }
               }
           }
           curr=next;
           next=new double[n][n];

       }
       double ans=0;
       for(int i=0;i<n;i++){
           for(int j=0;j<n;j++){
               ans+=curr[i][j];
           }
       }
       return ans;
    
    
    }
     public boolean isvalid(int r,int c, double[][] grid){
        if(r<0 || c<0 || r>=grid.length || c>=grid.length){
            return false;
        }
        return true;
    }
}
