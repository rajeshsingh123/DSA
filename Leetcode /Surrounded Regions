class Solution {
    public void solve(char[][] board) {
      for(int i=0; i<board[0].length; i++){
         if(board[0][i]=='O'){
             dfs(board,0,i);
         }
         }
        for(int i=0; i<board.length; i++){
         if(board[i][board[0].length-1]=='O'){
             dfs(board,i,board[0].length-1);
         }
         }
          for(int i=board[0].length-1; i>=0; i--){
         if(board[board.length-1][i]=='O'){
             dfs(board,board.length-1,i);
         }
         }
          for(int i=board.length-1; i>=0; i--){
         if(board[i][0]=='O'){
             dfs(board,i,0);
         }
         }
       for(int i=0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
      if(board[i][j]=='O'){
          board[i][j]='X';
      }
            }
       }
         for(int i=0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
      if(board[i][j]=='1'){
          board[i][j]='O';
      }
            }
       }
    }
  public static void dfs(char[][] board,int r,int c){
   
      board[r][c]='1';
     if(r-1>=0 && board[r-1][c]=='O'){
           // board[r-1][c]='1';
            dfs(board,r-1,c);
        }
         if(c+1<board[0].length && board[r][c+1]=='O'){
           //  board[r][c+1]='1';
            dfs(board,r,c+1);
        }
         if(r+1<board.length && board[r+1][c]=='O'){
           //  board[r+1][c]='1';
            dfs(board,r+1,c);
        }
     if(c-1>=0 && board[r][c-1]=='O'){
        // board[r][c-1]='1';
            dfs(board,r,c-1);
        }
    }

}
