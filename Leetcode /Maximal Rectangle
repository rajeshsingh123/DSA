class Solution {
    public int maximalRectangle(char[][] matrix) {
     //   int res=maxarea(matrix[0]);
        int[][] mat=new int[matrix.length][matrix[0].length];
        int res=0;
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(i==0 &&  matrix[i][j]=='1'){
                    mat[i][j]=1;
                }else if( matrix[i][j]=='1'){
                     mat[i][j]=1;
                    mat[i][j]+=mat[i-1][j];
                }
            }
            res=Math.max(res,maxarea(mat[i]));
        }
        return res;
    }
   
   public int maxarea(int[] heights) {
  
        Stack<Integer> st=new Stack<>();
        int res=0;
        int curr=0;;
        int top_index=0;
        int n=heights.length;
        for(int i=0;i<n;i++){
            while(st.empty()==false &&  heights[st.peek()]>heights[i]){
                top_index=st.peek();
                st.pop();
                curr=heights[top_index]*(st.empty()?i:i-st.peek()-1);
                res=Math.max(res,curr);
            }
            st.push(i);
        }
        while(st.empty()==false){
            top_index=st.peek();
            st.pop();
      
        curr=heights[top_index]*(st.empty()?n:n-st.peek()-1);
        res=Math.max(res,curr);
        }
        return res;
    }



}
