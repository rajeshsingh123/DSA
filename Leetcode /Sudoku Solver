class Solution {
   public static  int f=0;
    public void solveSudoku(char[][] board) {
         int[] complete = new int[1];
        solve(board,0,0,complete);
    }
    public static void solve(char[][] board,int i,int j,int[] complete ){
    if(i==board.length){
       complete[0] =1;
       System.out.println("msmms");
        return ;
    }
    int ni=0;
    int nj=0;

    if(j==board[0].length-1){
        ni=i+1;
        nj=0;
    }else{
        ni=i;
        nj=j+1;
    }

     if( board[i][j] !='.'){
         solve(board,ni,nj,complete);
     }else{
         for(char po='1'; po<='9'; po++){
          if(isvallid(board,i,j,po)){
              board[i][j]=po;
             //System.out.println(po);
              solve(board,ni,nj,complete);
             if (complete[0] != 1) {
                    board[i][j] = '.';
                    }

          }
         }
     }
    }
    public static boolean isvallid(char [][]board,int x,int y,char val){
     for(int j=0;j<board[0].length;j++){
         if(board[x][j]==val){
             return false;
         }
     }
      for(int i=0; i<board.length; i++){
          if(board[i][y]==val){
              return false;
          }
      }
      int smi=(x/3) * 3;
      int smj=(y/3) * 3;

      for(int i=0;i<3;i++){
          for(int j=0;j<3; j++){
              if(board[smi+i][smj+j]==val){
                  return false;
              }
          }
      }
     return true;

    }

}
