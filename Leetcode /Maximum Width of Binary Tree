* public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
       HashMap<TreeNode,Integer> map = new HashMap<>();
         Queue<TreeNode> que=new ArrayDeque<>();
   int lidx=0;
        int ridx=0;
        int stpt=0;
        int endpt=0;
        int pidx=0;
        int ans=Integer.MIN_VALUE;
        que.add(root);
        map.put(root,1);
        while(que.size()>0){
            int lev=que.size();
            for(int i=0; i<lev; i++){
                TreeNode node=que.remove();
                if(node.left!=null){
                    que.add(node.left);
                    map.put(node.left,2*map.get(node));
                    }
                if(node.right!=null){
                    que.add(node.right);
                    map.put(node.right,2*map.get(node)+1);
                }
                if(i==0){
                    stpt=map.get(node);
                   // System.out.println(stpt);
                }
                if(i==lev-1){
                    endpt=map.get(node);
                    //System.out.println(endpt);
                }
            }
            ans=Math.max(ans,endpt-stpt+1);
        }
        return ans;
    }
}
