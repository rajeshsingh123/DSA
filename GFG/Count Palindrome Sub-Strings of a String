
class Solution
{
    public int CountPS(String s, int N)
    {
        int ans=0;
           boolean dp[][]=new boolean [s.length()][s.length()];
       for(int gap=0;gap<dp.length;gap++){
          for(int i=0, j=gap;j<dp.length;j++,i++){
      if(gap==0){
          dp[i][j]=true;
      }else if(gap==1){
         dp[i][j]=s.charAt(i)==s.charAt(j);
         if(s.charAt(i)==s.charAt(j)){
             ans++;
         }
      }else{
          if(s.charAt(i)==s.charAt(j)&&dp[i+1][j-1]==true){
              dp[i][j]=true;
              ans++;
          }
      }
   } 
 }
 return ans;
 
}
}
        
        
        
//   int count=0;
//         for(int i=0; i<str.length(); i++){
//             for(int j=i+1;j<=str.length();j++){
//                 String ss=str.substring(i,j);
//                 if(ispalindrome(ss)){
//                     if(ss.length()>=2){
//                      count++;   
//                     }
                    
//                 }
//             }
//         }
//         return count;
//     }
//     public static boolean ispalindrome(String s){
//         int left=0;
//         int right=s.length()-1;
//         while(left<right){
//             if(s.charAt(left)==s.charAt(right)){
//                 left++;
//                 right--;
//             }else{
//                 return false;
//             }
//         }
//         return true;
    
