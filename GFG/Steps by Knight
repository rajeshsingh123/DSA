class Solution
{
    class Pair{
        int x;
        int y;
        Pair(int x,int y){
            this.x=x;
            this.y=y;
        }
    }
        private final int[][] directions = new int[][]{{1, 2}, {2, 1}, {2, -1}, {1, -2}, {-1, -2}, {-2, -1}, {-2, 1}, {-1, 2}};
    //Function to find out minimum steps Knight needs to reach target position.
    public int minStepToReachTarget(int KnightPos[], int TargetPos[], int N)
    {
        int n=N;
        int tx=TargetPos[0]-1;
        int ty=TargetPos[1]-1;
        int x1=KnightPos[0]-1;
        int y1=KnightPos[1]-1;
        
        if(tx==x1 && y1==ty){
            return 0;
        }
        boolean vis[][]=new boolean[n][n];
        vis[x1][y1]=true;
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(x1,y1));
        int ans=0;
        while(q.size()>0){
             int size=q.size();
             ans++;
             while(size!=0){
                 Pair p=q.poll();
                 int xx=p.x;
                 int yy=p.y;
                for(int i=0;i<directions.length;i++){
       int nr=xx+directions[i][0];
       int nc=yy+directions[i][1];
       if(nr==tx && nc==ty){
           return ans;
       }
       if(isvalid(nr,nc,n,vis)){
           vis[nr][nc]=true;
           q.add(new Pair(nr,nc));
       }
                }
                size--; 
             }
        }
        
       return ans; 
    }
      public boolean isvalid(int r,int c, int n,boolean vis[][]){
        if(r>=0 && c>=0 && r<n && c<n && vis[r][c]==false){
            return true;
        }
        return false;
    }
}
