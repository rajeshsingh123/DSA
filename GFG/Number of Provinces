class DSU{
  int par[];
  int rank[];
  DSU(int vtx){
      par=new int[vtx];
      rank=new int[vtx];
    for(int i=0;i<rank.length; i++){
        par[i]=i;
        rank[i]=1;
    }
  }
    public int find(int mem){
        if(par[mem]==mem){
            return mem;
        }
        int l=find(par[mem]);
        par[mem]=l;
        return l;

    }
    public void union(int x,int y){
        int xl=find(x);
        int yl=find(y);
        if(xl!=yl){
       if(rank[xl]>rank[yl]){
           par[yl]=xl;
       }else if(rank[xl]<rank[yl]){
           par[xl]=yl;
       }else{
           par[xl]=yl;
           rank[yl]++;
       }
        }
    }
}
class Solution {
    static int numProvinces(ArrayList<ArrayList<Integer>> adj, int V) {
        DSU ds=new DSU(V+1);
      for(int i=0; i<adj.size();i++){
          ArrayList<Integer> list=adj.get(i);
          for(int j=0;j<list.size();j++){
              if(list.get(j)==1){
                  ds.union(i+1,j+1);
              }
          }
      }      
       int ans=0;
        for(int i=1;i<V+1;i++){
            if(ds.par[i]==i){
                ans++;
            }
        }
        return ans;
    }
};
