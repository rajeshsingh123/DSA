class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
     	public static class Pair implements Comparable<Pair>{
		int vtx,wsf;
		Pair(int vtx,int wsf){
			this.vtx = vtx;
			this.wsf = wsf;
		}
		
		public int compareTo(Pair obj){
			return this.wsf-obj.wsf;
		}
	}
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        int vtces=adj.size();
        int [] ans=new int[vtces];
        Arrays.fill(ans,-1);
        PriorityQueue<Pair> pq= new PriorityQueue<>();
        pq.add(new Pair(S,0));
        while(pq.size()>0){
            Pair rem=pq.remove();
            if(ans[rem.vtx]==-1){
                ans[rem.vtx]=rem.wsf;
                ArrayList<ArrayList<Integer>> nbrs=adj.get(rem.vtx);
                for(ArrayList<Integer> edge: nbrs){
                    int wt=edge.get(1);
                    int nbr=edge.get(0);
                    if(ans[nbr]==-1){
                        pq.add(new Pair(nbr,rem.wsf+wt));
                    }
                }
            }
        }
        return ans;
    }
}
