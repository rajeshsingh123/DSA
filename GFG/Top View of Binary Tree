
class Solution
{
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
       // static int maxlvl=0;
       //static int minlvl=0;
       static class Pair{
           Node node;
           int level;
           Pair(Node node,int lev){
               this.node=node;
               this.level=lev;
           }
       }

    static ArrayList<Integer> topView(Node root)
    {
        // add your code
       // int lvl=0;
   /* HashMap<Integer,Integer> map=new HashMap<>();
    Queue<pair> queue=new ArrayDeque<>();
    queue.add(new pair(root,0));
    int minlevel=0;
    int maxlevel=0;
    while(queue.size()>0){
        pair rem=queue.remove();
        if(!map.containsKey(rem.level)){
            map.put(rem.level,rem.node.data);
        }
        minlevel=Math.min(minlevel,rem.level);
        maxlevel=Math.max(minlevel,rem.level);
        if(rem.node.left!=null){
            queue.add(new pair(rem.node.left,rem.level-1));
        }
         if(rem.node.right!=null){
            queue.add(new pair(rem.node.right,rem.level+1));
        }
    }
        ArrayList<Integer> res=new ArrayList<>();
        while(minlevel<=maxlevel){
            res.add(map.get(minlevel));
            minlevel++;
        }
    return res;*/
   /* ans(root,lvl,map);
             ArrayList<Integer> res =new ArrayList<Integer>();
        while(minlvl<=maxlvl){
            res.add(map.get(minlvl));
            minlvl++;
        }
        return res;
        
    }
   static void ans(Node root,int lvl,HashMap<Integer,Integer> map ){
        if(root==null){
            return ;
        }
        if(map.containsKey(lvl)==false){
            map.put(lvl,root.data);
        }
        minlvl=Math.min(minlvl,lvl);
        maxlvl=Math.max(maxlvl,lvl);
        ans(root.left,lvl-1,map);
        ans(root.right,lvl-1,map);
    }*/
    
    
    // new code
    HashMap<Integer,Integer> hm = new HashMap<>();
        Queue<Pair> queue = new ArrayDeque<>();
        ArrayList<Integer> ans = new ArrayList<>();
        
        queue.add(new Pair(root,0));
        hm.put(0,root.data);
        int minlvl=0,maxlvl=0;
        while(queue.size()>0){
            Pair p = queue.remove();
            
            if(!hm.containsKey(p.level)){
                hm.put(p.level,p.node.data);
            }
            minlvl = Math.min(minlvl,p.level);
            maxlvl = Math.max(maxlvl,p.level);
            if(p.node.left!=null) queue.add(new Pair(p.node.left,p.level-1));
            if(p.node.right!=null) queue.add(new Pair(p.node.right,p.level+1));
          
        }
        
        while(minlvl<=maxlvl){
            ans.add(hm.get(minlvl));
            minlvl++;
        }
        
        return ans;
    
    }
}
